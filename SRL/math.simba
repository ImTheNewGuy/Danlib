(*
srl.Modulo
~~~~~~~~~~
.. code-block:: pascal

    function Modulo(X, Y: Double): Double;

This function returns the remainder from the division of the first argument by the second.
It will always returns a result with the same sign as its second operand (or zero).

Example:

.. code-block:: pascal

    Writeln(srl.Modulo(a, b));
*)
function Modulo(X, Y: Double): Double; static;
begin
  Result := X - Floor(X / Y) * Y;
end;

(*
srl.Modulo; overload
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function Modulo(X, Y: Int32): Int32; overload;

Integer overload for Modulo.
*)
function Modulo(X, Y: Int32): Int32; static; overload;
begin
  Result := X - Floor(X / Y) * Y;
end;

(*
srl.CrossProduct
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function CrossProduct(ry,ry, px,py, qx,qy: Double): Double;
    
Cross-product of rp and rq vectors.
*)
function CrossProduct(rx,ry, px,py, qx,qy: Double): Double; static;
begin
  Result := (px - rx) * (qy - ry) - (py - ry) * (qx - rx);
end;

(*
srl.CrossProduct; overload;
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function CrossProduct(r, p, q: TPoint): Int64; overload;
    
Cross-product of rp and rq vectors.
*)
function CrossProduct(r, p, q: TPoint): Int64; static; overload;
begin
  Result := (p.x-r.x) * (q.y-r.y) - (p.y-r.y) * (q.x-r.x);
end;


(*
srl.DeltaAngle
~~~~~~~~~~~~~~
.. code-block:: pascal

    function DeltaAngle(DegA, DegB: Double; R: Double = 360): Double;

Returns the shortest difference between two given angles.
*)
function DeltaAngle(DegA, DegB: Double; R: Double = 360): Double; static;
begin
  Result := Modulo((DegA - DegB + R/2), R) - R/2;
end;


(*
srl.DistToLine
~~~~~~~~~~~~~~
.. code-block:: pascal

    function DistToLine(Pt, sA, sB: TPoint): Double;

Returns the distance to the nearest point on the line `sA`..`sB`
*)
function DistToLine(Pt, sA, sB: TPoint): Double; static;
var
  dx,dy,d:Int32;
  f: Single;
  qt:TPoint;
begin
  dx := sB.x - sA.x;
  dy := sB.y - sA.y;
  d := dx*dx + dy*dy;
  if (d = 0) then Exit(Hypot(pt.x-sA.x, pt.y-sA.y));
  f := ((pt.x - sA.x) * (dx) + (pt.y - sA.y) * (dy)) / d;
  if (f < 0) then Exit(Hypot(pt.x-sA.x, pt.y-sA.y));
  if (f > 1) then Exit(Hypot(pt.x-sB.x, pt.y-sB.y));
  qt.x := Round(sA.x + f * dx);
  qt.y := Round(sA.y + f * dy);
  Result := Hypot(pt.x-qt.x, pt.y-qt.y);
end;

{*
 Check if a point is inside a triangle.
*}
function PointInTriangle(PT, p1,p2,p3:TPoint): Boolean;
var
  b1,b2,b3: Boolean;
begin
  if p3.y < p1.y then Swap(p1,p3);
  if p1.x > p2.x then Swap(p1,p2);
  b1 := (pt.x - p2.x) * (p1.y - p2.y) - (p1.x - p2.x) * (pt.y - p2.y) < 0;
  b2 := (pt.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (pt.y - p3.y) < 0;
  if (b1 <> b2) then Exit;
  b3 := (pt.x - p1.x) * (p3.y - p1.y) - (p3.x - p1.x) * (pt.y - p1.y) < 0;
  if (b2 <> b3) then Exit;
  Result := True;
end;


{*
 Check if a point is within a circle.
*}
function PointInCircle(PT, Center: TPoint; Radius: Double): Boolean; static;
begin
  Result := Sqr(PT.X - Center.X) + Sqr(PT.Y - Center.Y) <= Sqr(Radius);
end;

  
{*
 Check if a point is within a ellipse.
*}
function PointInEllipse(PT, Center:TPoint; YRad, XRad: Double): Boolean; static;
var
  X, Y: Integer;
begin
  X := PT.X - Center.X;
  Y := PT.Y - Center.Y;
  Result := (Sqr(X)*Sqr(YRad))+(Sqr(Y)*Sqr(XRad)) <= (Sqr(YRad)*Sqr(XRad));
end;

{* 
 Check if a point is within a polygon/shape by the given outline points (poly)
 The points must be in order, as if you would draw a line trough each point.
 
 Winding number algorithm
*}
function PointInPoly(pt:TPoint; Poly:TPointArray): Boolean; static;
var
  wn,H,i,j:Int32;
begin
  wn := 0;
  H := High(poly);
  j := H;
  for i:=0 to H do 
  begin
    if (poly[i].y <= pt.y) then 
    begin
      if (poly[j].y > pt.y) then
        if (((poly[j].x-poly[i].x)*(pt.y-poly[i].y)-(pt.x-poly[i].x)*(poly[j].y-poly[i].y)) > 0) then
          Inc(wn);
    end else
      if poly[j].y <= pt.y then
        if (((poly[j].x-poly[i].x)*(pt.y-poly[i].y)-(pt.x-poly[i].x)*(poly[j].y-poly[i].y)) < 0) then
          Dec(wn);
    j := i;
  end;
  Result := (wn <> 0);
end;
