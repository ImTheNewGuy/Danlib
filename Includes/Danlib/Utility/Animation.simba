{
=========
Animation
=========
}

(*
PixelShiftMulti
~~~~~~~~~~~~~~~

.. code-block:: pascal

    function pixelShiftMulti(B: TBoxArray; T: Integer): TIntegerArray;

Calculates how many pixels change in boxes B during time T.

.. note::

    Author: marpis
    Last Modified: Jan. 9, 2014 by Flight

Example:

.. code-block:: pascal

    PixelShiftArray := PixelShiftMulti(box, 5000);
*)
function pixelShiftMulti(B: TBoxArray; T: Integer): TIntegerArray;
Var
  L, I: Integer;
  BMP, BMP2: TIntegerArray;
begin
  L := Length(B);
  SetLength(BMP, L);
  SetLength(BMP2, L);
  SetLength(Result, L);

  for I := 0 to (L - 1) do
  begin
    checkAreaBounds(B[i]);
    BMP[I] := bitmapFromClient(B[i].x1,B[i].y1,B[i].x2,B[i].y2);
  end;
  Wait(T);
  for I := 0 to (L - 1) do
  begin
    checkAreaBounds(B[i]);
    BMP2[I] := bitmapFromClient(B[i].x1,B[i].y1,B[i].x2,B[i].y2);
  end;
  for i := 0 to (L - 1) do
  begin
    checkAreaBounds(B[i]);
    result[i] := calculatePixelShift(BMP[i],BMP2[i],IntToBox(0,0,(b[i].x2 - b[i].x1),(b[i].y2-b[i].y1)));
  end;
  for I := 0 to (L - 1) do
  begin
    freeBitmap(BMP[I]);
    freeBitmap(BMP2[I]);
  end;
end;

(*
PixelShift
~~~~~~~~~~

.. code-block:: pascal

    function pixelShift(B: TBox; T: Integer): Integer;

Calculates how many pixels change in boxes B during time T.

.. note::

    Author: marpis
    Last Modified: Jan. 9, 2014 by Flight

Example:

.. code-block:: pascal

    Result := (pixelShift(box, 5000) > 2000);
*)
function pixelShift(B: TBox; Time: Integer): Integer;
var
  TIA: TIntegerArray;
begin
  TIA := PixelShiftMulti([B], Time);
  Result := TIA[0];
end;

(*
AveragePixelShift
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function averagePixelShift(B: TBox; waitPerloop, maxTime: Integer): Integer;

Gets the average pixel shift every 'waitPerLoop' ms over the time 'maxTime'

.. note::

    Author: Coh3n
    Last Modified: Jan. 9, 2014 by Flight

Example:

.. code-block:: pascal

    Result := (averagePixelShift(box, 500, 5000) > 2000);
*)
function averagePixelShift(b: TBox; waitPerLoop, maxTime: integer): integer;
var
  T : Timer;
  shifts: TIntegerArray;
begin
  T.start();

  while (T.timeElapsed < maxTime) do
  begin
    setLength(shifts, length(shifts)+1);
    shifts[high(shifts)] := pixelShift(b, waitPerLoop);
  end;

  result := averageTIA(shifts);
end;

function GetPixelShift(Area: TBox; WaitTime: UInt32): Int32;
var
  Before, After: Int32;
begin
  Before := BitmapFromClient(Area.x1, Area.y1, Area.x2, Area.y2);
  writeln(Before);
  Wait(WaitTime);
  After := BitmapFromClient(Area.x1, Area.y1, Area.x2, Area.y2);
  writeln(After);
  Result := CalculatePixelShift(Before, After, [0, 0, (Area.X2 - Area.X1), (Area.Y2 - Area.Y1)]);
  FreeBitmap(Before);
  FreeBitmap(After);
end;

function GetPixelShiftTPA(Area: TBox; WaitTime: UInt32; Count: Int32=1; AcceptLength:Int32=0): TPointArray;
var
  Before, After: PtrInt;
  x,y,c: Int32;
begin
  SetLength(Result, 64);
  for 1 to Count do
  begin
    Before := BitmapFromClient(Area.x1, Area.y1, Area.x2, Area.y2);
    Wait(WaitTime);
    After := BitmapFromClient(Area.x1, Area.y1, Area.x2, Area.y2);

    for y:=0 to Area.Y2-Area.Y1 do
      for x:=0 to Area.X2-Area.X1 do
        if FastGetPixel(Before,x,y) <> FastGetPixel(After,x,y) then
        begin
          if c = Length(Result) then
            SetLength(Result, c*2);
          Result[c] := Point(Area.x1+x,Area.y1+y);
          Inc(c);
        end;

    FreeBitmap(Before);
    FreeBitmap(After);
    if (AcceptLength <> 0) and (c > AcceptLength) then
      Break;
  end;
  SetLength(Result, c);
end;

function IsAnimating(Area:TBox; Shift, WaitTime:UInt32; Iter:UInt32=1): Boolean;
var
  i:Int32;
begin
  for i:=1 to Iter do
    if (GetPixelShift(Area, WaitTime) > shift) then
      Exit(True);
end;
