function arrInStr(arrS: TStringArray; str: string): Boolean;
var
  I, L, H: Integer;
begin
  Result := False;
  L := Low(arrS);    H := High(arrS);
  for I := L to H do
    if Pos(arrS[I], Str) > 0 then
      Exit(True);
end;

(*
InStrArrEx
~~~~~~~~~~

.. code-block:: pascal

    function InStrArrEx(S: string; StrArr: TStringArray; var Where: Integer): Boolean;

Returns true if the string S was found in the StrArr, and if so stores the index into Where.

.. note::

    by n3ss3s

Example:

.. code-block:: pascal

*)
function inStrArrEx(S: string; StrArr: TStringArray; var Where: Integer): Boolean;
var
   I,H : Integer;
begin
  H:=high(StrArr);
  for I:=0 to H do
    if LowerCase(StrArr[i]) = LowerCase(S) then
    begin
      Where := i;
      Exit(True);
    end;
end;

(*
StrInArr
~~~~~~~~



    function StrInArr(str: string; arrS: TStringArray): Boolean;

Returns True if str is found in the Array. Case sensitive.

.. note::

    by Narcle & Nava2

Example:

.. code-block:: pascal

*)
function strInArr(str: string; arrS: TStringArray): Boolean;
var
  I, L, H: Integer;
begin
  Result := False;
  L := Low(arrS);    H := High(arrS);
  for I := L to H do
    if Pos(Str, arrS[I]) > 0 then
      Exit(True);
end;

Function toBox(Xs, Ys, Xe, Ye: Integer): TBox;
begin
  Result := intToBox(Xs, Ys, Xe, Ye);
end;

Function pointToBox(Point: TPoint; Size: Integer): TBox; overload;
begin
  Result := intToBox(Point.X-round(Size/2), Point.Y-round(Size/2), Point.X+round(Size/2), Point.Y+round(Size/2));
end;

Function TBox.MidPoint: TPoint;
Begin
  Result := MiddleBox(Self);
End;

procedure checkAreaBounds(var Area: TBox);
var
  w,h:integer;
begin
  getClientDimensions(w, h);
  Area.X1 := Min(Area.X1, Area.X2);
  Area.X2 := Max(Area.X1, Area.X2);
  Area.Y1 := Min(Area.Y1, Area.Y2);
  Area.Y2 := Max(Area.Y1, Area.Y2);

  Area.X1 := Max(Area.X1, 0);
  Area.X2 := Min(Area.X2, w-1);
  Area.Y1 := Max(Area.Y1, 0);
  Area.Y2 := Min(Area.Y2, h-1);
end;

function CreateBitmapMaskFromText(txt,chars : string) : integer;
begin
  result := BitmapFromText(txt,chars);
end;

(*
FindTextEx
~~~~~~~~~~

.. code-block:: pascal

    function FindTextEx(var cx, cy: Integer; txt,font: TStringArray; Area: TBox): Boolean;

Searches for text or texts in specified box with specified font or fonts returns
true on first find of one of the texts with one of the fonts in the specified
box, returns x, y values aswell.

.. note::

    by Stupid3ooo, modified by LordJashin

Example:

.. code-block:: pascal

    var
      x, y: Integer;
      fonts, txts: TStringArray;
    begin
      fonts := ['MyOwnFontSet', 'SmallCharacters'];
      txts := ['Simba', 'HakunaMatata'];

      if FindTextEx(x, y, txts, fonts, Area_MS) then
        MoveMouse(x, y);
    end.
*)
function findTextEx(var cx, cy: Integer; txt, fonts: TStringArray; Area: TBox): Boolean;
var
  s,j,i : Integer;
begin
  for j:=0 to High(txt) do
    for i:=0 to High(fonts) do
    begin
      s := createBitmapMaskFromText(ToStr(txt[j]), ToStr(fonts[i]));
      checkAreaBounds(Area);

      Result := findBitmapMaskTolerance(S, cx, cy, Area.X1, Area.Y1, Area.X2, Area.Y2, 30, 30);
      freeBitmap(S);

      if (result) then
        exit;
    end;
end;

(*
BoxClosestPoint
~~~~~~~~~~~~~~~

.. code-block:: pascal

    function BoxClosestPoint(p : TPoint; b : TBox) : TPoint;

There are 'nine' places where the point can be (relative to a box)..
The middle, 5, is the box itself.
The rest looks like this:

|    1 | 2 | 3
|    ---------
|    4 | 5 | 6
|    ---------
|    7 | 8 | 9

Place 9 means it's past the b.x2, and past the b.y2,
therefore the smallest dist between the point and the box is the
distance between the point and the box's x2,y2 coordinate.

.. note::

    by Raym0nd

Example:

.. code-block:: pascal

*)

function boxClosestPoint(p : TPoint; b : TBox) : TPoint;
var
  column,row,place : integer;
begin
  result := Point(-1,-1);

  if (p.x < B.X1) then
    Column := 1
  else if (p.x > b.x2) then
    Column := 3
  else
    Column := 2;

  if (p.y < b.y1) then
    row := 1
  else if (p.y > b.y2) then
    row := 3
  else
    row := 2;

  place := (row-1)* 3 + column;
  case Place of
    1 : Result := Point(b.x1,b.y1);
    2 : Result := Point(p.x,b.y1);
    3 : Result := point(b.x2,b.y1);
    4 : Result := point(b.x1,p.y);
    5 : Result := p;
    6 : Result := point(b.x2,p.y);
    7 : Result := point(b.x1,b.y2);
    8 : Result := point(p.x,b.y2);
    9 : Result := point(b.x2,b.y2);
  end;
end;

(*
RandomPointBoxEx
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function RandomPointBoxEx(p : TPoint; b : TBox; extraDist : integer) : TPoint;

Returns a point in the box which is 'aimed' near the TPoint given..
Basically it only allows points that lay within the extradist from
the closest point to be returned.
Practical example:

    Inventory Box.. When your mouse is on the right of an inv item,
    you don't want to click on the left of the box.

.. note::

    by Raym0nd

Example:

.. code-block:: pascal

*)
function randomPointBoxEx(p : TPoint; b : TBox; extraDist : integer) : TPoint;
var
  TPA : TPointArray;
  Dist : integer;
  ClosestPoint : TPoint;
begin
  if PointInBox(p,b) then
  begin
    result := p;
    exit;
  end;

  ClosestPoint := BoxClosestPoint(p,b);
  Dist := Distance(p.x,p.y,ClosestPoint.x,ClosestPoint.y);
  TPA := TPAFromBox(b);
  FilterPointsDist(TPA,0,dist+extraDist,p.x,p.y);

  if (length(TPA) < 1) then
    result := point(RandomRange(b.X1,b.x2),RandomRange(b.y1,b.y2))
  else
    result := TPA[random(length(tpa))];
end;

function GetNumbers(text : string) : string;
begin;
  result := ExtractFromStr(text,numbers);
end;

function GetLetters(Text: string): string;
begin
  result := ExtractFromStr(Text,letters);
end;

function GetOthers(Text: string): string;
begin;
  result := ExtractFromStr(text,others);
end;

function waitFunc(Func: function: Boolean; WaitPerLoop, MaxTime: Integer): Boolean;
var
  T: Timer;
begin
  T.start();
  while (T.timeElapsed < MaxTime) do
  begin
    if (Func()) then
      Exit(True);
    Wait(WaitPerLoop);
  end;
end;
